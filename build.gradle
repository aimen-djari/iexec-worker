plugins {
    id 'java'
    id 'io.freefair.lombok' version '6.6.1'
    id 'org.springframework.boot' version '2.6.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'jacoco'
    id 'org.sonarqube' version '3.3'
    id 'maven-publish'
}

group = 'com.iexec.worker'
sourceCompatibility = 11
targetCompatibility = 11

ext {
    springCloudVersion = '2021.0.0'
    dockerJavaVersion = '3.2.12'
    lombokVersion = '1.18.2'
}

if (!project.hasProperty('gitBranch')) {
    ext.gitBranch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
}

if (gitBranch != 'main' && gitBranch != 'master' && ! (gitBranch ==~ '(release|hotfix|support)/.*')) {
    version += '-NEXT-SNAPSHOT'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://docker-regis-adm.iex.ec/repository/maven-public/"
        credentials {
            username nexusUser
            password nexusPassword
        }
    }
    maven {
        url "https://nexus.intra.iex.ec/repository/maven-public/"
    }
    maven {
        url "https://jitpack.io"
    }
}

configurations {
    all {
        // Exclude JUnit 4. Only JUnit 5 is used
        exclude group: 'junit', module: 'junit'
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    // iexec
    implementation "com.iexec.common:iexec-common:$iexecCommonVersion"
    implementation "com.iexec.blockchain:iexec-blockchain-adapter-api-library:$iexecBlockchainAdapterVersion"
    implementation "com.iexec.result-proxy:iexec-result-proxy-library:$iexecResultVersion"
    implementation "com.iexec.sms:iexec-sms-library:$iexecSmsVersion"

    // spring
    implementation("org.springframework.boot:spring-boot-starter") {
        exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging' //required for Graylog
    }
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-websocket"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation  "org.springframework.cloud:spring-cloud-starter"
    implementation  "org.springframework.cloud:spring-cloud-starter-openfeign"
    implementation  "org.springframework.retry:spring-retry"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.mockito:mockito-inline:4.8.0" // activates mocking final classes/methods
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Web3j issues, see core build.gradle
    // NoSuchMethodError: 'okhttp3.RequestBody okhttp3.RequestBody.create(java.lang.String, okhttp3.MediaType)'
    // Spring Boot dependencies BOM enforces okhttp3 3.14.9 in 2.6.X
    // It is required to define the dependency version required by web3j until migration to at least Spring Boot 2.7.X
    implementation 'com.squareup.okhttp3:okhttp:4.9.0' // Web3j issue: https://github.com/web3j/web3j/issues/1180

    // Required for com.iexec.worker.feign.config.RestTemplateConfig
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'

    implementation 'org.glassfish.jersey.inject:jersey-hk2:2.26'
    implementation 'org.glassfish.jersey.bundles.repackaged:jersey-guava:2.25.1'
    implementation 'javax.activation:activation:1.1.1'

    // Removes 'warning: unknown enum constant When.MAYBE'
    implementation 'com.google.code.findbugs:annotations:3.0.1'

    //graylog
    implementation 'biz.paluch.logging:logstash-gelf:1.5.1'

    // docker
    implementation "com.github.docker-java:docker-java:${dockerJavaVersion}"

    // expiring map
    implementation 'net.jodah:expiringmap:0.5.10'

    // awaitility
    testImplementation "org.awaitility:awaitility:4.2.0"
}

// ./gradlew build -Pdev
def isDev = project.hasProperty('dev')

jar {
    enabled true
    archiveClassifier.set('library')
}

springBoot {
    buildInfo()
}

test {
    useJUnitPlatform {
        // Ignore slow tests in development
        if (isDev) {
            excludeTags 'slow'
        }
    }
}

task itest {
    group 'Verification'
    description 'Runs the integration tests.'
}

jacoco {
    toolVersion = "0.8.7"
}
// sonarqube code coverage requires jacoco XML report
jacocoTestReport {
    reports {
        xml.required = true
    }
}
tasks.test.finalizedBy    tasks.jacocoTestReport
tasks.sonarqube.dependsOn tasks.jacocoTestReport

publishing {
    publications {
        maven(MavenPublication) {
            artifact bootJar
            from components.java
        }
    }
    repositories {
        maven {
            credentials {
                username nexusUser
                password nexusPassword
            }
            url project.hasProperty('nexusUrl') ? nexusUrl : ''
        }
    }
}

ext.jarPathForOCI  = relativePath(tasks.bootJar.outputs.files.singleFile)
ext.gitShortCommit = 'git rev-parse --short=8 HEAD'.execute().text.trim()
ext.ociImageName   = 'local/' + ['bash', '-c', 'basename $(git config --get remote.origin.url) .git'].execute().text.trim()

task buildImage(type: Exec) {
    group       'Build'
    description 'Builds an OCI image from a Dockerfile.'
    dependsOn    bootJar
    commandLine ("sh", "-c", "docker build --build-arg jar=$jarPathForOCI -t $ociImageName:$gitShortCommit ."
            + " && docker tag $ociImageName:$gitShortCommit $ociImageName:dev")
}

// ##################
// #     proxy     #
// ##################

//gradle bootRun -PproxyHost=192.168.XX.XXX -PproxyPort=3128
project.ext.getJvmArgs = {
    if (project.hasProperty("proxyHost") && project.hasProperty("proxyPort")) {
        return ["-Dhttp.proxyHost="+project.proxyHost, "-Dhttp.proxyPort="+project.proxyPort]
    } else {
        return  []
    }
}

bootRun {
    jvmArgs = project.ext.getJvmArgs()
}
