import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
	ext {
		springBootVersion = '2.0.5.RELEASE'
	}
	repositories {
		mavenCentral()
        jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'maven'
apply plugin: 'jacoco'

group = 'com.iexec.worker'
sourceCompatibility = 1.8

def UNIQUE_ID='hostname -f'.execute().text.trim()
def token='curl -XPOST --data name=${UNIQUE_ID} https://c770a93177c87a84c17cdfadc2f2a14f504988b89998083a:@packagecloud.io/install/repositories/iexec/common-new/tokens.text'.execute().text.trim()


repositories {
	mavenCentral()
	jcenter()
    maven {
        url "https://packagecloud.io/priv/${token}/iexec/common-new/maven2"
    }
}

configurations {
    deployerJars
}


ext {
    springCloudVersion = 'Finchley.RELEASE'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    // iexec
    compile "com.iexec.common:iexec-common-new:$iexecCommonVersion"
    //compile files('../iexec-common-new/build/libs/iexec-common-new-0.0.1-SNAPSHOT.jar')

    // spring
    compile "org.springframework.boot:spring-boot-starter"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-websocket"
    compile "org.springframework.boot:spring-boot-starter-actuator"
    compile "org.springframework.cloud:spring-cloud-starter"
    compile "org.springframework.cloud:spring-cloud-starter-openfeign"
    testCompile "org.springframework.boot:spring-boot-starter-test"

    //docker-client
    compile 'com.spotify:docker-client:8.13.1'
    compile 'org.glassfish.jersey.inject:jersey-hk2:2.26'
    compile 'org.glassfish.jersey.bundles.repackaged:jersey-guava:2.25.1'

    // lombok
    compileOnly "org.projectlombok:lombok:1.18.2"
    annotationProcessor "org.projectlombok:lombok:1.18.2"

	// package cloud
    deployerJars "io.packagecloud.maven.wagon:maven-packagecloud-wagon:0.0.6"
}

jacoco {
    toolVersion = "0.8.1"
    reportsDir = file("$buildDir/TestCoverageReport")
}
// the test coverage report will be created just before the build
build.dependsOn jacocoTestReport

def gitBranch = 'git name-rev --name-only HEAD'.execute().text.trim()
def isMasterBranch = gitBranch == "remotes/origin/master"
def canUploadArchives = isMasterBranch
def gitShortCommit = 'git rev-parse --short HEAD'.execute().text.trim()
def isSnapshotVersion = project.version.contains("SNAPSHOT")

uploadArchives {
    repositories.mavenDeployer {
        configuration = configurations.deployerJars
        repository(url: "packagecloud+https://packagecloud.io/iexec/worker-new") {
            authentication(password: packageCloudPassword)
        }
    }
}
uploadArchives.enabled = canUploadArchives

test {
    if (System.properties['test.profile'] == 'skipDocker') {
        exclude '**/docker/**'
    }
}

def imageName = "iexechub/iexec-worker"

project.ext.getDockerImageNameFull = {
    def imageNameWithVersion = imageName + ":${version}"
    if (isSnapshotVersion) {
        return imageNameWithVersion + "-" + gitShortCommit
    } else {
        return imageNameWithVersion
    }
}

project.ext.getDockerImageNameShortCommit = {
    return imageName + ":" + gitShortCommit
}

task prepareDockerFile(type: Copy) {
    delete 'build/main/resources/'
    from 'src/main/resources/Dockerfile'
    into 'build/main/resources/'
    filter(ReplaceTokens, tokens: [projectversion: "${version}".toString()])
}


task buildImage(type: Exec) {
    description 'Build a docker image for the core'
    commandLine("sh", "-c", "docker image build -f build/main/resources/Dockerfile -t " + getDockerImageNameFull() + " .")
}

buildImage.dependsOn prepareDockerFile
buildImage.enabled = isMasterBranch || project.hasProperty("forceDockerBuild")

task pushImage(type: Exec) {
    if (project.hasProperty("dockerHubUser") && project.hasProperty("dockerHubPassword")) {
        commandLine("sh", "-c", "docker login -u " + project.dockerHubUser + " -p " + project.dockerHubPassword + " && " +
                "docker push " + getDockerImageNameFull() + " && " +
                "docker tag " + getDockerImageNameFull() + " " + getDockerImageNameShortCommit() + " && " +
                "docker push " + getDockerImageNameShortCommit() + " && " +
                "docker logout")
    } else {
        println "Credentials for DockerHub are missing, the images cannot be pushed"
    }
}

pushImage.dependsOn buildImage
pushImage.enabled = isMasterBranch && project.hasProperty("dockerHubUser") && project.hasProperty("dockerHubPassword")
